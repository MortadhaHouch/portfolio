import React, { useRef } from 'react'
import {motion} from 'framer-motion'
import { useTheme } from 'next-themes';
export default function Text() {
  const pathRefs = useRef<SVGPathElement[]>([]);
  const {theme} = useTheme();
  return (
    <svg id="Layer_2" stroke={"rgb(34,197,94)"} strokeMiterlimit={10} strokeWidth={2} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 750.19 94.69">
      <g id="Layer_1-2" data-name="Layer_1">
        <g>
          {
            paths.map((path, index) => (
              <motion.path
                key={index}
                d={path}
                fill="none"
                stroke={"rgb(34,197,94)"}
                initial={{
                  pathLength:0
                }}
                whileInView={{
                  pathLength: 1,
                }}
                viewport={{
                  margin:"-150px"
                }}
                ref={r=>{
                  if(r){
                    pathRefs.current.push(r);
                  }
                }}
                transition={{
                  duration: 5,
                  ease: 'easeInOut',
                  type:"spring"
                }}
              />
            ))
          }
        </g>
      </g>
    </svg>
  )
}
const paths = [
  "M13.75,79.94V14.75H2.5V3.88h72.25v26.19h-10.75v-15.31H26.88v25.88h32.31v10.88H26.88v28.44h37.12v-15.81h10.75v26.69H2.5v-10.88h11.25Z",
  "M92.44,79.94V14.75h-11.81V3.88h33.62c9.29,0,16.45.48,21.47,1.44,5.02.96,9.88,3.12,14.59,6.5,4.71,3.38,8.47,8.01,11.28,13.91,2.81,5.9,4.22,12.62,4.22,20.16,0,8.58-1.35,16.04-4.06,22.38-2.71,6.33-6.26,11.06-10.66,14.19-4.4,3.12-9.62,5.3-15.69,6.53-6.06,1.23-13.78,1.84-23.16,1.84h-31.62v-10.88h11.81ZM105.56,79.94h6.88c7.67,0,13.74-.48,18.22-1.44,4.48-.96,8.26-2.59,11.34-4.91,3.08-2.31,5.58-5.8,7.5-10.47,1.92-4.67,2.88-10.17,2.88-16.5,0-7.54-1.57-13.94-4.72-19.19-3.15-5.25-7.17-8.68-12.06-10.28-4.9-1.6-12.43-2.41-22.59-2.41h-7.44v65.19Z",
  "M197.88,14.75v43.5c0,6.75.34,11.42,1.03,14,.69,2.58,2.41,4.78,5.16,6.59s6.29,2.72,10.62,2.72c5.17,0,9.12-.78,11.88-2.34s4.57-3.67,5.47-6.31c.9-2.65,1.34-7.32,1.34-14.03V14.75h-10.06V3.88h34v10.88h-10.88v45.44c0,6.12-.26,10.57-.78,13.34-.52,2.77-1.93,5.67-4.22,8.69-2.29,3.02-5.52,5.44-9.69,7.25-4.17,1.81-9.23,2.72-15.19,2.72-6.58,0-12.06-.84-16.44-2.53s-7.67-3.95-9.88-6.78c-2.21-2.83-3.68-5.85-4.41-9.06-.73-3.21-1.09-8.19-1.09-14.94V14.75h-10.75V3.88h34.19v10.88h-10.31Z",
  "M338.75,55.44l11.31,6.31c-2.54,9.67-7.68,17.16-15.41,22.47-7.73,5.31-16.62,7.97-26.66,7.97-13.17,0-23.73-4.27-31.69-12.81-7.96-8.54-11.94-19.1-11.94-31.69,0-13.79,4-24.77,12-32.94,8-8.17,18.44-12.25,31.31-12.25,11.38,0,20.94,3.1,28.69,9.31V3.88h11.25v27.94h-11.25c-2.5-5.67-6.35-10.05-11.56-13.16-5.21-3.1-10.69-4.66-16.44-4.66-8.67,0-15.78,3.12-21.34,9.38s-8.34,14.15-8.34,23.69,2.98,17.79,8.94,24c5.96,6.21,13.02,9.31,21.19,9.31,6.71,0,12.81-2.16,18.31-6.47s9.38-10.47,11.62-18.47Z",
  "M413.66,60.25h-31.32l-6.65,19.69h10.56v10.88h-34.25v-10.88h10.52l23.74-66.25h-10.51V3.88h44.44v9.81h-10.87l24.33,66.25h9.73v10.88h-34.06v-10.88h10.81l-6.47-19.69ZM410.38,50.06l-11.57-36.38h-1.19l-12.04,36.38h24.8Z",
  "M470,79.94V14.75h-17.94v22.19h-10.75V3.88h70.44v33.06h-10.75V14.75h-17.88v65.19h11.31v10.88h-35.56v-10.88h11.12Z",
  "M526.62,79.94V14.75h-9.38V3.88h31.88v10.88h-9.38v65.19h9.38v10.88h-31.88v-10.88h9.38Z",
  "M559.62,46.94c0-12.62,4.12-23.19,12.38-31.69s19-12.75,32.25-12.75,24.27,4.25,32.69,12.75c8.42,8.5,12.62,19.15,12.62,31.94s-4.28,23.8-12.84,32.28c-8.56,8.48-19.45,12.72-32.66,12.72-8.42,0-16.16-2.01-23.22-6.03-7.06-4.02-12.37-9.62-15.91-16.81-3.54-7.19-5.31-14.66-5.31-22.41ZM573.94,47c0,9.54,2.79,17.54,8.38,24,5.58,6.46,12.92,9.69,22,9.69s16.4-3.3,22.19-9.91c5.79-6.6,8.69-14.49,8.69-23.66s-2.95-17.07-8.84-23.47c-5.9-6.4-13.3-9.59-22.22-9.59s-16.12,3.15-21.75,9.44c-5.62,6.29-8.44,14.12-8.44,23.5Z",
  "M668.94,79.94V14.75h-12.44V3.88h29.68l38.14,67.58V14.75h-12.31V3.88h35.69v10.88h-12.81v76.94h-13.47l-41.72-74.2v62.45h12.44v10.88h-35.62v-10.88h12.44Z",
]